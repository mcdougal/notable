package composition.music;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import util.RandomUtil;
import app.Debug;

import composition.Composition;
import composition.LilyPondObject;
import composition.meta.Instrument;
import composition.meta.KeySignature;
import composition.meta.TimeSignature;

/**
 * Represents a phrase of music within the sheet music generation project. A
 * phrase is represented as a collection of measures.
 */
public class Phrase extends MusicParent implements LilyPondObject {
	
	private enum ImprovType {
		SPLIT_NOTE, INSERT_REST, HARMONIZE, CHORD
	}
	
    /////////////////////////////////
	//
    //  CONSTRUCTOR
    //
	/////////////////////////////////
    
    /**
     * Constructs a new, pseudo-randomly generated Phrase.
     * 
     */
    public Phrase(Composition composition, int numMeasures) {
    	super(composition, numMeasures);
    }
    
    /**
     * Constructs a new, pseudo-randomly generated Phrase.
     * 
     */
    public Phrase(Composition composition, int numMeasures, List<MusicObject> notes) {
    	super(composition, numMeasures, notes);
    }

    /////////////////////////////////
	//
    //  GENERATION
    //
	/////////////////////////////////
	
    /**
     * 
     */
    public List<MusicObject> generateContents() {
    	
    	// get composition related variables for easy access
    	TimeSignature timeSig = this.getComposition().getTimeSignature();
    	KeySignature key = this.getComposition().getKey();
    	Instrument instrument = this.getComposition().getInstrument();
    	int difficulty = this.getComposition().getDifficulty();
    	
    	// a note is generated for every beat
    	int numBeatsInPhrase = timeSig.getBeatsPerMeasure() * this.getNumMeasures();
    	
    	List<MusicObject> notes = new ArrayList<MusicObject>(numBeatsInPhrase);
    	
    	int lowPitch = instrument.getLowestPitchForNote(key.getKey());
    	
    	if (instrument.getRangeInOctaves() > 2) {
        	int lowestPlayablePitch = instrument.getLowestPitch();
    		int distToLowestPitch = lowPitch - lowestPlayablePitch;
    		
    		// guitar plays low notes easily
    		if (!instrument.equals(Instrument.GUITAR) && distToLowestPitch < 9)
    			lowPitch = lowPitch + 12;
    	}
    	
    	int highPitch;
    	if (difficulty > 50) {
    		if (instrument.getRangeInOctaves() > 3) {
    			int rndm = new Random().nextInt(3);
    			if (rndm == 0)
    				highPitch = Note.getPitch(key.getKey(), Note.getOctaveFromPitch(lowPitch) + 3);
    			else if (rndm == 1)
    				highPitch = Note.getPitch(key.getNoteAtScaleDegree(3), Note.getOctaveFromPitch(lowPitch) + 3);
    			else
    				highPitch = Note.getPitch(key.getNoteAtScaleDegree(4), Note.getOctaveFromPitch(lowPitch) + 3);
    		}
    		highPitch = instrument.getHighestPitchForNote(key.getKey());
    		
    		int highNote = key.getNoteAtScaleDegree(3);
    		int tempPitch = instrument.getHighestPitchForNote(highNote);
    		if (tempPitch > highPitch)
    			highPitch = tempPitch;
    		
    		highNote = key.getNoteAtScaleDegree(4);
    		tempPitch = instrument.getHighestPitchForNote(highNote);
    		if (tempPitch > highPitch)
    			highPitch = tempPitch;
    	}
    	else {
    		highPitch = Note.getPitch(key.getKey(), Note.getOctaveFromPitch(lowPitch) + 1);
    	}
    	
    	if (lowPitch < instrument.getLowestPitch()) {
    		// programming error
    		Debug.printException(new Exception("Low pitch is out of instrument's range."));
    		return null;
    	}
    	if (highPitch > instrument.getHighestPitch()) {
    		// programming error
    		Debug.printException(new Exception("High pitch is out of instrument's range."));
    		return null;
    	}
    	
    	if (RandomUtil.rndmChance(1, 2))
    		notes.addAll(getArchContour(numBeatsInPhrase, lowPitch, lowPitch, highPitch));
    	else
    		notes.addAll(getInvertedArchContour(numBeatsInPhrase, highPitch, highPitch, lowPitch));
    	
    	return notes;
    }
    
    /**
     * 
     */
    private List<MusicObject> getArchContour(int numBeats, int firstPitch, int lastPitch, int peakPitch) {
    	KeySignature key = this.getComposition().getKey();
    	
    	int lengthOfDownSection = numBeats / 2;
    	int lengthOfUpSection = numBeats - lengthOfDownSection;
    	
    	int peakOfUpSection = key.getPitchAtInterval(peakPitch, -1);
    	
    	List<MusicObject> arch = getAscendingRampContour(lengthOfUpSection, firstPitch, peakOfUpSection);
    	arch.addAll(getDescendingRampContour(lengthOfDownSection, peakPitch, lastPitch));
    	
    	return arch;
    }
    
    /**
     * 
     */
    private List<MusicObject> getInvertedArchContour(int numBeats, int firstPitch, int lastPitch, int peakPitch) {
    	KeySignature key = this.getComposition().getKey();
    	
    	int lengthOfUpSection = numBeats / 2;
    	int lengthOfDownSection = numBeats - lengthOfUpSection;
    	
    	int peakOfDownSection = key.getPitchAtInterval(peakPitch, 1);
    	
    	List<MusicObject> arch = getDescendingRampContour(lengthOfDownSection, firstPitch, peakOfDownSection);
    	arch.addAll(getAscendingRampContour(lengthOfUpSection, peakPitch, lastPitch));
    	
    	return arch;
    }
    
    /**
     * numBeats > 0
     */
    private List<MusicObject> getAscendingRampContour(int numBeats, int firstPitch, int peakPitch) {
    	
    	if (firstPitch >= peakPitch) {
    		// programming error
    		Debug.printException(new Exception("First pitch must be lower than peak pitch for descending ramp contour."));
    		return null;
    	}
    	
    	return getRampContour(true, numBeats, firstPitch, peakPitch);
    }
    
    /**
     * numBeats > 0
     */
    private List<MusicObject> getDescendingRampContour(int numBeats, int firstPitch, int peakPitch) {
    	
    	if (firstPitch <= peakPitch) {
    		// programming error
    		Debug.printException(new Exception("First pitch must be higher than peak pitch for descending ramp contour."));
    		return null;
    	}
    	
    	return getRampContour(false, numBeats, firstPitch, peakPitch);
    }
    
    /**
     * numBeats > 0
     */
    private List<MusicObject> getRampContour(boolean ascending, int numBeats, int firstPitch, int peakPitch) {
    	
    	Random r = new Random();

    	KeySignature key = this.getComposition().getKey();
    	TimeSignature timeSig = this.getComposition().getTimeSignature();

    	int rampDirection = ascending ? 1 : -1;
    	int beatDuration = Note.SHORTEST_DURATION / timeSig.getBeatDuration();
    	
    	List<MusicObject> notes = new ArrayList<MusicObject>(numBeats);
    	notes.add(new Note(firstPitch, beatDuration));
    	
    	int pitch = firstPitch;
		int interval = 0;
		
    	for (int i = 1; i < numBeats; i++) {
    		
    		boolean isLastBeat = i == numBeats - 1;
    		
    		// last note must be peak
    		if (isLastBeat) {
    			notes.add(new Note(peakPitch, beatDuration));
    			break;
    		}

    		boolean isSecondToLastBeat = i == numBeats - 2;
    		int distanceToPeak = Math.abs(peakPitch - pitch);
    		
    		// second to last note should be close to peak
    		if (isSecondToLastBeat && distanceToPeak > 2) {
    			
    			interval = rampDirection;
    			
    			if (distanceToPeak > 8) {
        			pitch = key.getPitchAtInterval(pitch, interval);
        			distanceToPeak = Math.abs(peakPitch - pitch);
        			
        			while (distanceToPeak > 8) {
        				interval = interval + rampDirection;
        				pitch = key.getPitchAtInterval(pitch, interval);
            			distanceToPeak = Math.abs(peakPitch - pitch);
        			}
        			
                	notes.add(new Note(pitch, beatDuration));
                	continue;
    			}
    		}
    		
			// if last interval was up more than 1 scale degree, resolve down a step
    		else if (interval > 1) {
    			interval = -1;
    		}
    		
			// if last interval was down more than 1 scale degree, resolve up a step
    		else if (interval < -1) {
    			interval = 1;
    		}
    		
    		// low chance of staying on same note
    		else if (RandomUtil.rndmChance(5, 100)) {
    			interval = 0;
    		}
    		
    		// if close to peak, back off
    		else if (distanceToPeak <= 2) {
    			interval = -rampDirection * (1 + r.nextInt(4));
    		}
    		
    		// if close to first pitch, back off
    		else if (Math.abs(pitch - firstPitch) <= 2) {
    			interval = rampDirection * (1 + r.nextInt(4));
    		}
    		
    		// if at scale degree 6, tendency to resolve up to tonic
    		else if (key.getScaleDegreeOfPitch(pitch) == 6 && RandomUtil.rndmChance(1, 4)) {
    			interval = 1;
    		}
    		
    		// if major and at scale degree 3, tendency to resolve down to scale degree 2
    		else if (key.isMajor() && key.getScaleDegreeOfPitch(pitch) == 3 && RandomUtil.rndmChance(1, 4)) {
    			interval = -1;
    		}
    		
    		else {
    			
        		// high chance of going in the ramp direction
    			boolean moveInRampDir = RandomUtil.rndmChance(8, 10);
    			
				// high chance of changing by a small interval;
    			// 100% chance if this is the second to last beat
        		boolean smallInterval = isSecondToLastBeat ? true : RandomUtil.rndmChance(8, 10);
        		
        		// small interval means go up or down 1 step
        		if (smallInterval)
        			interval = moveInRampDir ? rampDirection : -rampDirection;
        		
        		// large interval means go up or down more than 1 step
        		else {

        			// make sure a large step up doesn't reach or go past the peak
        			if (moveInRampDir) {
            			int maxInterval = rampDirection * 5;
        				int tempPitch = key.getPitchAtInterval(pitch, maxInterval);
        				boolean pastPeak = rampDirection == 1 ? tempPitch >= peakPitch : tempPitch <= peakPitch;
        				
    					while (pastPeak) {
        					maxInterval = maxInterval - rampDirection;
        					tempPitch = key.getPitchAtInterval(pitch, maxInterval);
        					pastPeak = rampDirection == 1 ? tempPitch >= peakPitch : tempPitch <= peakPitch;
        				}
        				
        				if (maxInterval == 0) {
        					Debug.printException(new Exception("Peak in ascending ramp contour reached too soon"));
        					return null;
        				}
        				
        				interval = rampDirection * (1 + r.nextInt(Math.abs(maxInterval)));
        			}
        			
        			else
        				interval = -rampDirection * (1 + r.nextInt(5));
        		}
    		}
    		
    		pitch = key.getPitchAtInterval(pitch, interval);
        	notes.add(new Note(pitch, beatDuration));
    	}
    	
    	return notes;
    }

    /////////////////////////////////
	//
    //  MODIFICATION
    //
	/////////////////////////////////

    /**
     * 
     */
    public void simplify() {
    	TimeSignature timeSig = this.getComposition().getTimeSignature();
    	
    	int beatDuration = Note.SHORTEST_DURATION / timeSig.getBeatDuration();
    	int beatsPerMeasure = timeSig.getBeatsPerMeasure();
    	int durationPerMeasure = beatDuration * beatsPerMeasure;
    	
    	List<MusicObject> newContents = new ArrayList<MusicObject>();
    	
    	int currentUnit = 0;
    	
    	for (int i = 0; i < this.getContents().size(); i++) {
    		MusicObject musicObject = this.getContents().get(i);
    		
			MusicObject newObject = musicObject.clone();
			newContents.add(newObject);
    		
    		boolean isLastObject = i == this.getContents().size() - 1;
    		
    		if (!isLastObject) {
    			MusicNode nextNode = (MusicNode) this.getContents().get(i + 1);
    			int nextUnit = (currentUnit % durationPerMeasure) + nextNode.getLength();
    			
        		if (newObject.getClass().equals(Note.class)) {
        			Note note = (Note) newObject;
        			
        			if (nextUnit < durationPerMeasure) {
        				note.setLength(note.getLength() + nextNode.getLength());
        				i++;
        			}
        		}
        		else if (newObject.getClass().equals(Chord.class)) {
        			Chord chord = (Chord) newObject;
        			
        			if (nextUnit < durationPerMeasure) {
        				chord.setLength(chord.getLength() + nextNode.getLength());
        				i++;
        			}
        		}
    		}
			
			currentUnit = currentUnit + ((MusicNode) newObject).getLength();
    	}
    	
    	this.setContents(newContents);
    }

    /**
     * 
     */
    public void complicate() {
    	// small chance to split note into two shorter notes
    	if (RandomUtil.rndmChance(1, 2))
    		improviseOnRandomPattern(ImprovType.SPLIT_NOTE);

    	// small chance to insert rests
    	if (RandomUtil.rndmChance(1, 40))
    		improviseOnRandomPattern(ImprovType.INSERT_REST);

    	// small chance to replace note with harmony
    	if (RandomUtil.rndmChance(1, 25))
    		improviseOnRandomPattern(ImprovType.HARMONIZE);

    	Instrument instrument = this.getComposition().getInstrument();
    	
    	// small chance to replace note with chord
    	if (instrument.canPlayChords() && RandomUtil.rndmChance(1, 10)) {
    		improviseOnRandomPattern(ImprovType.CHORD);
    	}
    }
    
    /**
     * 
     */
    private void improviseOnRandomPattern(ImprovType type) {
    	TimeSignature timeSig = this.getComposition().getTimeSignature();
    	
    	Random r = new Random();

    	int beatsPerMeasure = timeSig.getBeatsPerMeasure();
    	int beatDuration = Note.SHORTEST_DURATION / timeSig.getBeatDuration();
    	
    	int beatInterval = r.nextInt(beatsPerMeasure);
    	int measureInterval = 1 + r.nextInt(4);
    	
    	if (measureInterval > this.getNumMeasures())
    		measureInterval = this.getNumMeasures();
    	
    	if (measureInterval == 0)
    		return;
    	
    	List<MusicObject> newContents = new ArrayList<MusicObject>();
    	
    	int currentMeasure = 0;
    	int currentBeat = 0;
    	int currentUnit = 0;
    	
    	for (MusicObject musicObject : this.getContents()) {
    		boolean takeAction =
    			currentMeasure % measureInterval == 0
    			&& currentBeat == beatInterval
    			&& musicObject.getClass().equals(Note.class);
    		
    		if (takeAction) {
    			Note note = (Note) musicObject;
    			
    			switch(type) {
    				case SPLIT_NOTE : splitNote(note, this.getContents(), newContents); break;
    				case INSERT_REST : insertRest(note, newContents); break;
    				case HARMONIZE : switchToHarmony(note, newContents); break;
    				case CHORD : addChord(note, newContents); break;
    				default : newContents.add(note.clone());
    			}
    		}
    		else {
    			newContents.add(musicObject.clone());
    		}

    		currentUnit = currentUnit + ((MusicNode) musicObject).getLength();
    		if (currentUnit % beatDuration == 0)
    			currentBeat = (currentBeat + 1) % beatsPerMeasure;
    		if (currentBeat == 0)
    			currentMeasure++;
    	}
    	
    	this.setContents(newContents);
    }
    
    /**
	 * 
	 */
    private void splitNote(Note note, List<MusicObject> oldList, List<MusicObject> newList) {
		
		int noteLength = note.getLength();
		
		// if the note can't be split any further
		if (noteLength >= Note.SHORTEST_DURATION || noteLength % 2 != 0) {
			newList.add(note.clone());
			return;
		}
		
		int noteIndex = oldList.indexOf(note);
		boolean isLastNote = noteIndex == oldList.size() - 1;
		MusicObject nextObject = isLastNote ? null : oldList.get(noteIndex + 1);
		
		// high chance of using a different note for split
		if (nextObject != null && nextObject.getClass().equals(Note.class) &&
				RandomUtil.rndmChance(95, 100)) {
			
			Note nextNote = (Note) oldList.get(noteIndex + 1);
			
			int nextNoteInterval;
			if (nextNote.getPitch() > note.getPitch())
				nextNoteInterval = 1;
			else if (nextNote.getPitch() < note.getPitch())
				nextNoteInterval = -1;
			else
				nextNoteInterval = 0;
			
			KeySignature key = this.getComposition().getKey();
			int addedPitch = key.getPitchAtInterval(note.getPitch(), nextNoteInterval);
			
			newList.add(new Note(note.getNote(), note.getOctave(), note.getLength() / 2));
			newList.add(new Note(addedPitch, note.getLength() / 2));
		}
		else {
			newList.add(new Note(note.getNote(), note.getOctave(), note.getLength() / 2));
			newList.add(new Note(note.getNote(), note.getOctave(), note.getLength() / 2));
		}
	}
    
    /**
     * 
     */
    private void insertRest(Note note, List<MusicObject> newList) {
    	newList.add(new Note(Note.NOTE_VALUES.REST, note.getOctave(), note.getLength()));
    }
    
    /**
     * 
     */
    private void switchToHarmony(Note note, List<MusicObject> newList) {
		KeySignature key = this.getComposition().getKey();

		int newPitch;
		if (RandomUtil.rndmChance(3, 4))
			// third
			newPitch = key.getPitchAtInterval(note.getPitch(), 2);
		else
			// fifth
			newPitch = key.getPitchAtInterval(note.getPitch(), 4);
		
		Instrument instrument = this.getComposition().getInstrument();
		
		if (newPitch <= instrument.getHighestPitch())
			newList.add(new Note(newPitch, note.getLength()));
		else
			newList.add(note.clone());
    }
    
    /**
     * 
     */
    private void addChord(Note note, List<MusicObject> newList) {
    	addChord(note, newList, RandomUtil.rndmChance(1, 2));
    }
    
    /**
     * 
     */
    private void addChord(Note note, List<MusicObject> newList, boolean full) {
    	KeySignature key = this.getComposition().getKey();
    	Instrument instrument = this.getComposition().getInstrument();
    	
    	int highestPlayablePitch = instrument.getHighestPitch();
    	
    	int rootPitch = note.getPitch();
    	
		int thirdPitch = key.getPitchAtInterval(rootPitch, 2);
		if (thirdPitch > highestPlayablePitch)
			thirdPitch = Chord.NONE;
		
		int fifthPitch;
		if (full) {
			fifthPitch = key.getPitchAtInterval(rootPitch, 4);

			if (fifthPitch > highestPlayablePitch)
				fifthPitch = Chord.NONE;
		}
		else
			fifthPitch = Chord.NONE;
		
    	newList.add(new Chord(rootPitch, thirdPitch, fifthPitch, note.getLength()));
    }
    
    /**
     * 
     */
    public void shiftNOctaves(int n) {
    	Instrument instrument = this.getComposition().getInstrument();
    	
    	for (MusicObject musicObject : this.getContents()) {
    		if (musicObject.getClass().equals(Note.class)) {
    			Note note = (Note) musicObject;
    			int newPitch = note.getPitch() + (12 * n);
    			
    			if (newPitch >= instrument.getLowestPitch()
    					&& newPitch <= instrument.getHighestPitch())
    				note.shiftNOctaves(n);
    		}
    		else if (musicObject.getClass().equals(Chord.class)) {
    			Chord chord = (Chord) musicObject;
    			int newRoot = chord.getRoot() + (12 * n);
    			
    			KeySignature key = this.getComposition().getKey();
    			
    			if (newRoot >= instrument.getLowestPitch()
    					&& newRoot <= instrument.getHighestPitch())
    				musicObject = new Chord(newRoot, instrument, key, chord.getLength());
    		}
    	}
    }
    
    /**
     * 
     */
    public void chordify() {
    	List<MusicObject> newContents = new ArrayList<MusicObject>();
    	
    	for (MusicObject musicObject : this.getContents()) {
    		if (musicObject.getClass().equals(Note.class))
    			addChord((Note) musicObject, newContents, true);
    	}
    	
    	this.setContents(newContents);
    }
    
    /**
     * 
     */
    public void harmonize() {
    	List<MusicObject> newContents = new ArrayList<MusicObject>();
    	
    	for (MusicObject musicObject : this.getContents()) {
    		if (musicObject.getClass().equals(Note.class))
    			switchToHarmony((Note) musicObject, newContents);
    	}
    	
    	this.setContents(newContents);
    }

	/**
	 * 
	 */
	public MusicObject clone() {
		return new Phrase(this.getComposition(),
				this.getNumMeasures(), this.cloneContents());
	}

    /////////////////////////////////
	//
    //  LILYPOND
    //
	/////////////////////////////////

	/**
	 * 
	 */
	public String getLilyPondHeader() {
		return "";
	}

	/**
	 * 
	 */
	public String getLilyPondSpacer() {
		return " ";
	}
}
