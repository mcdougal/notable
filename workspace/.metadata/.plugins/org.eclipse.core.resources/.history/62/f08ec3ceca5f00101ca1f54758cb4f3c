package composition;

import util.Debug;

import composition.meta.Instrument;
import composition.meta.Instrument.Clef;
import composition.meta.KeySignature;
import composition.meta.TimeSignature;
import composition.music.node.Note.NOTE_VALUES;
import composition.music.parent.Song;
import composition.music.transformation.Chordify;
import composition.music.transformation.Complicate;
import composition.music.transformation.Harmonize;
import composition.music.transformation.ShiftOctave;
import composition.music.transformation.Simplify;

/**
 * Represents an entire piece of music. This not only includes the notes but
 * also the meta-data like time signature and key signature.
 */
public class Composition implements LilyPondObject {

    /////////////////////////////////
	//
    //  CONSTANTS
    //
	/////////////////////////////////
    
	/**
	 * Default properties
	 */
	public static interface DEFAULT {
		public static final Instrument INSTRUMENT = Instrument.SOPRANO_RECORDER;
		public static final TimeSignature TIME_SIGNATURE = new TimeSignature(4, 4);
		public static final KeySignature KEY_SIGNATURE = new KeySignature(NOTE_VALUES.C, true);
	    public static final int LENGTH = 32;
	    public static final int DIFFICULTY = 50;
	}

    /////////////////////////////////
	//
    //  VARIABLES
    //
	/////////////////////////////////

	/** Instrument on which this music should be played */
    private Instrument instrument;
    
    /** Time signature */
    private TimeSignature timeSignature;
    
    /** Key signature */
    private KeySignature key;
    
    /** Length in measures */
    private int length;
    
    /** Difficulty of this music (1-100 inclusive) */
    private int difficulty;
    
    /** Music (i.e. bars, notes, etc.) */
    private Song song;

	/** Bass line for instruments that can play more than one note at a time */
    private Song bass;

    /////////////////////////////////
	//
    //  CONSTRUCTORS
    //
	/////////////////////////////////

    /**
     * Constructs a new Composition with the default values.
     */
    public Composition() {
        this.instrument = DEFAULT.INSTRUMENT;
        this.timeSignature = DEFAULT.TIME_SIGNATURE;
        this.key = DEFAULT.KEY_SIGNATURE;
        this.length = DEFAULT.LENGTH;
        this.difficulty = DEFAULT.DIFFICULTY;
    }

    /////////////////////////////////
	//
    //  SONG GENERATION
    //
	/////////////////////////////////
    
    /**
     * Pseudo-randomly generates a song based on the properties of this
     * Composition. For instruments that can play a bass line and a melody at
     * the same time (like guitar and piano) this method will also generate
     * the bass line.
     */
    public void generateSong() {
    	song = new Song(this, length);
    	
    	boolean isForPiano = instrument.equals(Instrument.PIANO);
    	boolean isForGuitar = instrument.equals(Instrument.GUITAR);
    	
    	// piano and guitar require specialized transformations
    	
    	if (isForPiano || isForGuitar) {
    		bass = (Song) song.clone();
    		
    		// eighth notes are too fast for the bass part
    		if (timeSignature.getBeatDuration() >= 8)
    			bass.applyTransformation(new Simplify());

    		// the lower the difficulty the more times the bass is simplified
    		if (difficulty <= 80)
    			bass.applyTransformation(new Simplify());
			if (difficulty <= 40)
    			bass.applyTransformation(new Simplify());
			if (difficulty <= 10)
    			bass.applyTransformation(new Simplify());

    		if (isForPiano) {
	    		song.applyTransformation(new ShiftOctave(2));
	    		
	    		if (difficulty > 10)
		    		bass.applyTransformation(new Chordify());
	    		else
		    		song.applyTransformation(new Harmonize());
    		}
    		else if (isForGuitar) {
        		bass.applyTransformation(new ShiftOctave(-1));
    		}
    	}
    	
    	if (timeSignature.getBeatDuration() >= 8)
    		song.applyTransformation(new Simplify());
    	
    	// the lower the difficulty the more times the song is simplified
        if (difficulty <= 20)
        	song.applyTransformation(new Simplify());
    	if (difficulty <= 10)
        	song.applyTransformation(new Simplify());
        
    	// the higher the difficulty the more times the song is complicated
    	
        for (int i = 30; i < difficulty; i+=8) {
        	song.applyTransformation(new Complicate());
        }
        
        Debug.printMsg(Debug.checkSongAccuracy(song));
    }

    /////////////////////////////////
	//
    //  LILYPOND
    //
	/////////////////////////////////
    
    /**
     * Returns a LilyPond formatted String representing this Composition.
     */
    public String toLilyPondString() {
        StringBuilder s = new StringBuilder();

        s.append("\\version \"2.12.0\" \n");
        s.append("\n");
        s.append("ignore = \\override NoteColumn #'ignore-collision = ##t");
        s.append("\n");
        s.append("\\book {\n");
        s.append("\t\\score {\n");
        
        s.append("\t\t<<\n");
        s.append("\t\t\\new Staff {\n");
        
        s.append("\t\t\t<<\n");
        s.append("\t\t\t\\new Voice {\n");
        s.append("\t\t\t\t{ \n");
        s.append("\t\t\t\t\t% instrument: "+instrument.getName()+"\n");
        s.append("\t\t\t\t\t% measures: "+length+"\n");
        s.append("\t\t\t\t\t% difficulty: "+difficulty+"\n");
        s.append("\t\t\t\t\t\n");
        s.append("\t\t\t\t\t\\ignore\n");
        s.append("\t\t\t\t\t"+instrument.toLilyPondString()+"\n");
        s.append("\t\t\t\t\t"+timeSignature.toLilyPondString()+"\n");
        s.append("\t\t\t\t\t"+key.toLilyPondString()+"\n");
        s.append("\t\t\t\t\t\\tempo 4 = 120 \n");
        s.append("\t\t\t\t\t\n");
        s.append(song.toLilyPondString());
        s.append("\t\t\t\t}\n");
        s.append("\t\t\t}\n");
        
        if (instrument.equals(Instrument.GUITAR)) {
            s.append("\t\t\t\\new Voice {\n");
            s.append("\t\t\t\t{ \n");
            s.append(bass.toLilyPondString());
            s.append("\t\t\t\t}\n");
            s.append("\t\t\t}\n");
        	
        }
        s.append("\t\t\t>>\n");
        s.append("\t\t}\n");
        
        if (instrument.equals(Instrument.PIANO)) {
	        s.append("\t\t\\new Staff {\n");
	        s.append("\t\t\t\\new Voice {\n");
	        s.append("\t\t\t\t{ \n");
	        s.append("\t\t\t\t\t"+Instrument.clefToLilyPondString(Clef.BASS)+"\n");
	        s.append("\t\t\t\t\t"+timeSignature.toLilyPondString()+"\n");
	        s.append("\t\t\t\t\t"+key.toLilyPondString()+" \n");
	        s.append("\t\t\t\t\t\\tempo 4 = 120 \n");
	        s.append("\t\t\t\t\t\n");
	        s.append(bass.toLilyPondString());
	        s.append("\t\t\t\t}\n");
	        s.append("\t\t\t}\n");
	        s.append("\t\t}\n");
        }
        
        s.append("\t\t>>\n\n");
        
        if (Debug.isOn())
        	s.append("\t\t\\midi { }\n");
        s.append("\t\t\\layout { }\n");
        s.append("\t}\n");
        s.append("}\n");
        
        return s.toString();
    }
    
    /////////////////////////////////
	//
    //  GETTERS / SETTERS
    //
	/////////////////////////////////
    
    /**
     * Returns the instrument on which this Composition should be played.
     */
    public Instrument getInstrument() {
        return instrument;
    }

    /**
     * Sets the instrument on which this Composition should be played to the
     * given Instrument.
     */
    public void setInstrument(Instrument instrument) {
        this.instrument = instrument;
    }

    /**
     * Returns the time signature of this Composition.
     */
    public TimeSignature getTimeSignature() {
        return timeSignature;
    }

    /**
     * Sets the time signature of this Composition to the given TimeSignature.
     */
    public void setTimeSignature(TimeSignature timeSignature) {
        this.timeSignature = timeSignature;
    }

    /**
     * Returns the key signature of this Composition.
     */
    public KeySignature getKey() {
        return key;
    }

    /**
     * Sets the key signature of this Composition to the given KeySignature.
     */
    public void setKey(KeySignature key) {
        this.key = key;
    }

    /**
     * Returns the length of this Composition (in measures).
     */
    public int getLength() {
        return length;
    }

    /**
     * Sets the length of this Composition (in measures) to the given integer.
     * 
     * @param length 0 <= value < 100000
     * @throws Exception if the given length is invalid
     */
    public void setLength(int length) throws Exception {
    	if (length < 0 || length >= 100000)
    		throw new Exception(
    				"Length must be positive and less than 100,000.");
    	
        this.length = length;
    }

    /**
     * Returns the difficulty of this Composition.
     */
    public int getDifficulty() {
        return difficulty;
    }

    /**
     * Sets the difficulty of this Composition to the given integer.
     * 
     * @param difficulty 1-100 inclusive
     * @throws Exception if the given difficulty is invalid
     */
    public void setDifficulty(int difficulty) throws Exception {
    	if (difficulty < 1 || difficulty > 100)
    		throw new Exception(
    				"Difficulty must be between 1 and 100, inclusive.");
    	
        this.difficulty = difficulty;
    }
    
    /**
     * Returns the Song associated with this Composition. Used for testing
     * that the generated song falls within this Composition's parameters.
     */
    public Song getSong() {
		return song;
	}
    
    /**
     * Returns the bass line associated with this Composition. Used for testing
     * that the generated bass line falls within this Composition's parameters.
     */
    public Song getBass() {
		return bass;
	}
}
